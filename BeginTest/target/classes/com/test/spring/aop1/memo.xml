<?xml version="1.0" encoding="UTF-8"?>

<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd">

	<!-- 
		
		Spring AOP
		
		주업무 객체 > MemoImpl
		보조업무 객체 > Logger
		
		MemoImpl + Logger > 결합!!
		
		***** 스프링이 특정 객체(클래스)를 인지하려면.. 반드시(!!!!!) <bean>으로 선언해야 한다. *****
		
	 -->

	<!-- 주업무 객체 -->
	<bean id="memo" class="com.test.spring.aop1.MemoImpl"></bean>

	<!-- 보조업무 객체 -->
	<bean id="logger" class="com.test.spring.aop1.Logger"></bean>

	<!-- 주업무 객체 + 보조업무 객체 :: AOP -->
	<aop:config>
	
		<!-- 보조업무를 담당할 객체를 지정: 역할 지정 -->
		<aop:aspect id="loggerAspect" ref="logger">
		
			<!-- 
				주 업무인 글쓰기, 글읽기, 수정하기, 삭제하기와 붙여야한다.
				그렇다면 스프링이 주업무가 누가있고, 주업무 어떤거와 연결시켜야하는지 인식해야 한다!
				
				PointCut 지정하기
				- 주 업무 객체 지정 > 메서드 찾기
				
				(메서드 단위로 지정할 수 있다.)
				MemoImpl.add 메서드
				MemoImpl.read 메서드
				
				'AspectJ 표현식' 사용
				- execution() 지시자
				- within() 지시자
				
				execution()
				- execution([접근지정자] 반환형 [클래스].메서드(인자))
				
				- execution(public void com.test.spring.aop1.MemoImpl.add(String))
				
				- *		: 와일드카드(접근지정자, 반환형, 패키지, 클래스, 메서드)
				- ..	: 와일드카드(인자)
				
			 -->
			 <aop:pointcut expression="execution(public void com.test.spring.aop1.MemoImpl.add(String))" id="p1"/>
			 
			 <aop:pointcut expression="execution(public String com.test.spring.aop1.MemoImpl.read(int))" id="p2"/>

			 <!-- 두개 합치는것도 가능하나 보기에 복잡해서 많이 쓰이진 않는다.라고 하셨지만 아래 보니 한꺼번에 찾는 경우도 많다고 함! -->
			 <aop:pointcut expression="execution(public String com.test.spring.aop1.MemoImpl.read(int)) || execution(public void com.test.spring.aop1.MemoImpl.add(String))" id="p3"/>
			 
			 <!-- 보조업무객체와 동일한 클래스일 경우 패키지와 클래스명 생략이 가능하다. -->
			 <aop:pointcut expression="execution(public void com.test.spring.aop1.MemoImpl.add(String)) || execution(add(String))" id="p4"/>

			 <!-- ??? -->
			 <aop:pointcut expression="execution(* com.test.spring.aop1.MemoImpl.*(..))" id="p5"/>
			 <aop:pointcut expression="execution(* com.test.spring.aop1.MemoImpl.a*(..))" id="p6"/><!-- a*로 시작하는애들, *a로 끝나는 애들, a*a a로 시작해서 a 로끝나는 애들
			 
			  -->

			 <!-- 
			 	보조 업무 객체(Logger) + 포인트컷(MemoImpl.add)
			 	- 결합 > 위빙(Weaving) > 5종류 Advice 하나 구현
			 
			  -->
			  <!-- method="보조업무객체의 메서드 이름" pointcut-ref="주업무 id" -->
			  <!-- <aop:after method="log" pointcut-ref="p1"/> -->
			  <!-- <aop:before method="log" pointcut-ref="p1"/> -->
			  
			  <!-- <aop:after method="log" pointcut-ref="p1"/>
			  <aop:after method="log" pointcut-ref="p2"/> -->
			  
			  <!-- 아래와 같이 한꺼번에 찾아서 1:1로 연결하는 경우가 많다. -->
			  <!-- <aop:after method="log" pointcut-ref="p3"/> -->
			  
			  <!--  <aop:after method="log" pointcut-ref="p4"/> --> <!-- 이거 안돼 -->

			  <!-- <aop:after method="log" pointcut-ref="p5"/> -->
			  
			  <!-- <aop:around method="time" pointcut-ref="p1"/> -->
			  
			  <!-- <aop:after-returning method="history" pointcut-ref="p2" returning="history 메서드의 매개변수 이름"/> -->
			  
			  <!-- <aop:after-returning method="history" pointcut-ref="p2" returning="memo"/> -->
			  
			  <!-- <aop:after-throwing method="check" pointcut-ref="p2" throwing="Exception 변수 이름"/> -->
			  <aop:after-throwing method="check" pointcut-ref="p2" throwing="e"/>
			  
		
		</aop:aspect>
	
	</aop:config>






</beans>